{"version":3,"sources":["lhcb.js"],"names":[],"mappings":"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","file":"lhcb.compiled.js","sourcesContent":["/*\n * Copyright [2015-2017] Fraunhofer Gesellschaft e.V., Institute for\n * Open Communication Systems (FOKUS)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nlet mid = 0;\n\nclass LHCB {\n    constructor() {\n        this.l = new Logger(this);\n        this.l.d(\"Creating new LHCB Lib from:\", arguments);\n    }\n\n    getBroker(host, port) {\n        return new LHCBBroker(host, port);\n    }\n\n    getLocalClient() {\n        return new LHCBClient();\n    }\n}\n\nclass LHCBBroker {\n    constructor(host, port) {\n        this.l = new Logger(this);\n        this.l.d(\"Creating new LHCB Broker from:\", arguments);\n        this.ws = new WebSocket(\"wss://\" + host + \":\" + port + \"/ws\");\n        this.ws.onopen = () => {\n            this.l.d(\"WebSocket open\");\n            this.ready = true;\n        };\n        this.l.d(\"Created WebSocket:\", this.ws);\n        this.ready = false;\n    }\n\n    isReady() {\n        return this.ready;\n    }\n\n    read(name) {\n        return new Promise((resolve) => {\n            this.l.d(\"Running 'read' Promise\");\n\n            let request = {\"type\": \"read\", \"client\": name};\n            let jsonRequest = JSON.stringify(request);\n            this.ws.onmessage = (msg) => {\n                let response = JSON.parse(msg.data);\n                this.l.d(\"Got response for \" + jsonRequest + \":\", JSON.stringify(response, null, 2));\n                resolve(response);\n            };\n            this.l.d(\"Sending request:\", jsonRequest);\n            this.ws.send(jsonRequest);\n        });\n    }\n\n    execute(client, funcName, args) {\n\n        return new Promise((resolve) => {\n            this.l.d(\"Running 'execute' Promise\");\n\n            let request = {\"type\": \"execute\", \"client\": client, \"value\": {\"name\": funcName, \"args\": args}};\n            let jsonRequest = JSON.stringify(request);\n            this.ws.onmessage = (msg) => {\n                let response = JSON.parse(msg.data);\n                this.l.d(\"Got response for \" + jsonRequest + \":\", JSON.stringify(response, null, 2));\n                resolve(response);\n            };\n            this.l.d(\"Sending request:\", jsonRequest);\n            this.ws.send(jsonRequest);\n        })\n    }\n\n    getRemoteClient(name) {\n        return new LHCBClient(this, name);\n    }\n}\n\nclass LHCBClient {\n    constructor(broker, name) {\n        this.l = new Logger(this);\n        this.l.d(\"Creating new LHCB Client from:\", arguments);\n\n        this.ready = false;\n        if (!broker || !name) {\n            this.l.d(\"Unspecified Broker or Name, trying to connect locally AND get BrokerInfo\");\n            let ws = new WebSocket(\"wss://localhost:9443/ws\");\n\n            let request = {\n                \"type\": \"execute\", \"mid\": mid++, \"value\": {\n                    \"name\": \"getBrokerInfo\"\n                }\n            };\n            let jsonRequest = JSON.stringify(request);\n            ws.onmessage = (msg) => {\n                let response = JSON.parse(msg.data);\n                this.l.d(\"Got response for \" + jsonRequest + \":\", JSON.stringify(response, null, 2));\n                if (response.type == \"response\") {\n                    this.name = response.value.name;\n                    this.broker = new LHCBBroker(response.value.host, response.value.port);\n                    this.ready = true;\n                }\n            };\n            ws.onopen = () => {\n                this.l.d(\"WebSocket open\");\n                this.l.d(\"Sending request:\", jsonRequest);\n                ws.send(jsonRequest);\n            };\n            this.localWs = ws;\n        } else {\n            this.l.d(\"Broker and Name specified, communicating exclusively through Broker\");\n            this.broker = broker;\n            this.name = name;\n            this.ready = true;\n        }\n    }\n\n    isReady() {\n        return this.ready;\n    }\n\n    read() {\n        if (this.localWs && this.localWs.readyState == WebSocket.OPEN) {\n            this.l.d(\"Local WebSocket is open, reading locally...\");\n            return new Promise((resolve) => {\n                this.l.d(\"Running 'read' Promise\");\n\n                let request = {\"type\": \"read\"};\n                let jsonRequest = JSON.stringify(request);\n                this.localWs.onmessage = (msg) => {\n                    let response = JSON.parse(msg.data);\n                    this.l.d(\"Got response for \" + jsonRequest + \":\", JSON.stringify(response, null, 2));\n                    resolve(response);\n                };\n                this.l.d(\"Sending request:\", jsonRequest);\n                this.localWs.send(jsonRequest);\n            })\n        } else {\n            this.l.d(\"No local WebSocket connection to LHCB Client -> Reading via Broker...\");\n            return this.broker.read(this.name);\n        }\n    }\n\n    execute(funcName, args) {\n        if (this.localWs && this.localWs.readyState == WebSocket.OPEN) {\n            this.l.d(\"Local WebSocket is open, executing locally...\");\n            return new Promise((resolve) => {\n                this.l.d(\"Running 'execute' Promise\");\n\n                let request = {\"type\": \"execute\", \"value\": {\"name\": funcName, \"args\": args}};\n                let jsonRequest = JSON.stringify(request);\n                this.localWs.onmessage = (msg) => {\n                    let response = JSON.parse(msg.data);\n                    this.l.d(\"Got response for \" + jsonRequest + \":\", JSON.stringify(response, null, 2));\n                    resolve(response);\n                };\n                this.l.d(\"Sending request:\", jsonRequest);\n                this.localWs.send(jsonRequest);\n            });\n        } else {\n            this.l.d(\"No local WebSocket connection to LHCB Client -> Executing via Broker...\");\n            return this.broker.execute(this.name, funcName, args);\n        }\n    }\n\n    getBroker() {\n        return this.broker;\n    }\n\n    getName() {\n        return this.name;\n    }\n}\n\n/**\n * Simple class for easier logging\n */\nclass Logger {\n    constructor(obj) {\n        this.name = obj.constructor.name;\n        // console.debug(\"Setting up Logger for\", this.name);\n        for (let name of Object.getOwnPropertyNames(Object.getPrototypeOf(obj))) {\n            let method = obj[name];\n            // Supposedly you'd like to skip constructor\n            if (!(method instanceof Function) || method === obj) continue;\n            // console.log(\"injecting logger into\", name);\n            let self = this;\n            obj[name] = function () {\n                console.debug(self.name + \".\" + name + \"():\", arguments);\n                return method.apply(obj, arguments);\n            }\n        }\n        this.c = console;\n    }\n\n    d(msg, ...args) {\n        arguments[0] = this.name + \": \" + arguments[0];\n        this.c.debug.apply(this.c, arguments);\n    }\n\n    l(msg, ...args) {\n        arguments[0] = this.prefix + arguments[0];\n        this.c.log.apply(this.c, arguments);\n    }\n\n    i(msg, ...args) {\n        arguments[0] = this.prefix + arguments[0];\n        this.c.info.apply(this.c, arguments);\n    }\n\n    w(msg, ...args) {\n        arguments[0] = this.prefix + arguments[0];\n        this.c.warn.apply(this.c, arguments);\n    }\n\n    e(msg, ...args) {\n        arguments[0] = this.prefix + arguments[0];\n        this.c.error.apply(this.c, arguments);\n    }\n}\n\nwindow.LHCB = new LHCB();\n\n// export default LHCB;"]}