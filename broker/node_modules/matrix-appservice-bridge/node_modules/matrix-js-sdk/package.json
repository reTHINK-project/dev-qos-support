{
  "name": "matrix-js-sdk",
  "version": "0.2.2",
  "description": "Matrix Client-Server SDK for Javascript",
  "main": "index.js",
  "scripts": {
    "test": "istanbul cover --report cobertura --config .istanbul.yml -i \"lib/**/*.js\" jasmine-node -- spec --verbose --junitreport --forceexit --captureExceptions",
    "check": "jasmine-node spec --verbose --junitreport --forceexit --captureExceptions",
    "gendoc": "jsdoc -r lib -P package.json -R README.md -d .jsdoc",
    "build": "jshint -c .jshint lib/ && browserify browser-index.js -o dist/browser-matrix-dev.js --ignore-missing",
    "watch": "watchify browser-index.js -o dist/browser-matrix-dev.js -v",
    "lint": "jshint -c .jshint lib spec && gjslint --unix_mode --disable 0131,0211,0200,0222 --max_line_length 90 -r spec/ -r lib/",
    "release": "npm run build && mkdir dist/$npm_package_version && uglifyjs -c -m -o dist/$npm_package_version/browser-matrix-$npm_package_version.min.js dist/browser-matrix-dev.js && cp dist/browser-matrix-dev.js dist/$npm_package_version/browser-matrix-$npm_package_version.js"
  },
  "repository": {
    "url": "https://github.com/matrix-org/matrix-js-sdk"
  },
  "keywords": [
    "matrix-org"
  ],
  "browser": "browser-index.js",
  "author": {
    "name": "matrix.org"
  },
  "license": "Apache 2.0",
  "dependencies": {
    "browser-request": "^0.3.3",
    "browserify": "^10.2.3",
    "q": "^1.4.1",
    "request": "^2.53.0"
  },
  "devDependencies": {
    "watchify": "^3.2.1",
    "istanbul": "^0.3.13",
    "jasmine-node": "^1.14.5",
    "jshint": "^2.8.0"
  },
  "readme": "Matrix Javascript SDK\n=====================\n[![Build Status](http://matrix.org/jenkins/buildStatus/icon?job=JavascriptSDK)](http://matrix.org/jenkins/job/JavascriptSDK/)\n\nThis is the [Matrix](https://matrix.org) Client-Server v1/v2 alpha SDK for\nJavaScript. This SDK can be run in a browser or in Node.js.\n\nQuickstart\n==========\n\nIn a browser\n------------\nCopy ``dist/$VERSION/browser-matrix-$VERSION.js`` and add that as a ``<script>`` to\nyour page. There will be a global variable ``matrixcs`` attached to\n``window`` through which you can access the SDK.\n\nPlease check [the working browser example](examples/browser) for more information. \n\nIn Node.js\n----------\n\n``npm install matrix-js-sdk``\n\n```javascript\n  var sdk = require(\"matrix-js-sdk\");\n  var client = sdk.createClient(\"https://matrix.org\");\n  client.publicRooms(function(err, data) {\n    console.log(\"Public Rooms: %s\", JSON.stringify(data));\n  });\n```\n\nPlease check [the Node.js terminal app](examples/node) for a more complex example.\n\nWhat does this SDK do?\n----------------------\n\nThis SDK provides a full object model around the Matrix Client-Server API and emits\nevents for incoming data and state changes. Aside from wrapping the HTTP API, it:\n - Handles syncing (via `/initialSync` and `/events`)\n - Handles the generation of \"friendly\" room and member names.\n - Handles historical `RoomMember` information (e.g. display names).\n - Manages room member state across multiple events (e.g. it handles typing, power\n   levels and membership changes).\n - Exposes high-level objects like `Rooms`, `RoomState`, `RoomMembers` and `Users`\n   which can be listened to for things like name changes, new messages, membership\n   changes, presence changes, and more.\n - Handle \"local echo\" of messages sent using the SDK. This means that messages\n   that have just been sent will appear in the timeline as 'sending', until it\n   completes. This is beneficial because it prevents there being a gap between\n   hitting the send button and having the \"remote echo\" arrive.\n - Mark messages which failed to send as not sent.\n - Automatically retry requests to send messages due to network errors.\n - Automatically retry requests to send messages due to rate limiting errors.\n - Handle queueing of messages.\n - Handles pagination.\n - Handle assigning push actions for events.\n - Handles room initial sync on accepting invites.\n - Handles WebRTC calling.\n\nLater versions of the SDK will:\n - Expose a `RoomSummary` which would be suitable for a recents page.\n - Provide different pluggable storage layers (e.g. local storage, database-backed)\n\nUsage\n=====\n\nConventions\n-----------\n\n### Emitted events\n\nThe SDK will emit events using an ``EventEmitter``. It also\nemits object models (e.g. ``Rooms``, ``RoomMembers``) when they\nare updated.\n\n```javascript\n  // Listen for low-level MatrixEvents\n  client.on(\"event\", function(event) {\n    console.log(event.getType());\n  });\n  \n  // Listen for typing changes\n  client.on(\"RoomMember.typing\", function(event, member) {\n    if (member.typing) {\n      console.log(member.name + \" is typing...\");\n    }\n    else {\n      console.log(member.name + \" stopped typing.\");\n    }\n  });\n  \n  // start the client to setup the connection to the server\n  client.startClient();\n```\n\n### Promises or Callbacks\n\nThe SDK supports *both* callbacks and Promises (Q). The convention\nyou'll see used is:\n\n```javascript\n  var promise = matrixClient.someMethod(arg1, arg2, callback);\n```\n  \nThe ``callback`` parameter is optional, so you could do:\n\n```javascript\n  matrixClient.someMethod(arg1, arg2).then(function(err, result) {\n    ...\n  });\n```\n\nAlternatively, you could do:\n\n```javascript\n  matrixClient.someMethod(arg1, arg2, function(result) {\n    ...\n  });\n```\n  \nMethods which support this will be clearly marked as returning\n``Promises``.\n\nExamples\n--------\nThis section provides some useful code snippets which demonstrate the\ncore functionality of the SDK. These examples assume the SDK is setup like this:\n\n```javascript\n   var sdk = require(\"matrix-js-sdk\");\n   var myUserId = \"@example:localhost\";\n   var myAccessToken = \"QGV4YW1wbGU6bG9jYWxob3N0.qPEvLuYfNBjxikiCjP\";\n   var matrixClient = sdk.createClient({\n       baseUrl: \"http://localhost:8008\",\n       accessToken: myAccessToken,\n       userId: myUserId\n   });\n```\n\n### Automatically join rooms when invited\n\n```javascript\n   matrixClient.on(\"RoomMember.membership\", function(event, member) {\n       if (member.membership === \"invite\" && member.userId === myUserId) {\n           matrixClient.joinRoom(member.roomId).done(function() {\n               console.log(\"Auto-joined %s\", member.roomId);\n           });\n       }\n   });\n   \n   matrixClient.startClient();\n```\n   \n### Print out messages for all rooms\n\n```javascript\n   matrixClient.on(\"Room.timeline\", function(event, room, toStartOfTimeline) {\n       if (toStartOfTimeline) {\n           return; // don't print paginated results\n       }\n       if (event.getType() !== \"m.room.message\") {\n           return; // only print messages\n       }\n       console.log(\n           // the room name will update with m.room.name events automatically\n           \"(%s) %s :: %s\", room.name, event.getSender(), event.getContent().body\n       );\n   });\n   \n   matrixClient.startClient();\n```\n\nOutput:\n```\n  (My Room) @megan:localhost :: Hello world\n  (My Room) @megan:localhost :: how are you?\n  (My Room) @example:localhost :: I am good\n  (My Room) @example:localhost :: change the room name\n  (My New Room) @megan:localhost :: done\n```\n\n### Print out membership lists whenever they are changed\n\n```javascript\n   matrixClient.on(\"RoomState.members\", function(event, state, member) {\n       var room = matrixClient.getRoom(state.roomId);\n       if (!room) {\n           return;\n       }\n       var memberList = state.getMembers();\n       console.log(room.name);\n       console.log(Array(room.name.length + 1).join(\"=\"));  // underline\n       for (var i = 0; i < memberList.length; i++) {\n           console.log(\n               \"(%s) %s\",\n               memberList[i].membership,\n               memberList[i].name\n           );\n       }\n   });\n   \n   matrixClient.startClient();\n```\n   \nOutput:\n```\n  My Room\n  =======\n  (join) @example:localhost\n  (leave) @alice:localhost\n  (join) Bob\n  (invite) @charlie:localhost\n```\n  \nAPI Reference\n=============\n\nA hosted reference can be found at\nhttp://matrix-org.github.io/matrix-js-sdk/index.html\n\nThis SDK uses JSDoc3 style comments. You can manually build and\nhost the API reference from the source files like this:\n\n```\n  $ npm run gendoc\n  $ cd .jsdoc\n  $ python -m SimpleHTTPServer 8005\n```\n  \nThen visit ``http://localhost:8005`` to see the API docs.\n\nContributing\n============\n*This section is for people who want to modify the SDK. If you just\nwant to use this SDK, skip this section.*\n\nFirst, you need to pull in the right build tools:\n```\n $ npm install\n```\n\nBuilding\n--------\n\nTo build a browser version from scratch when developing::\n```\n $ npm run build\n```\n\nTo constantly do builds when files are modified (using ``watchify``)::\n```\n $ npm run watch\n```\n\nTo run tests (Jasmine)::\n```\n $ npm test\n```\n \nTo run linting:\n```\n $ npm run lint\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/matrix-org/matrix-js-sdk/issues"
  },
  "_id": "matrix-js-sdk@0.2.2",
  "dist": {
    "shasum": "aa0b29fe56587b69ec7195419456906216202e2b"
  },
  "_from": "matrix-js-sdk@^0.2.1",
  "_resolved": "https://registry.npmjs.org/matrix-js-sdk/-/matrix-js-sdk-0.2.2.tgz"
}
