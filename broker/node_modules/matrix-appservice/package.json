{
  "name": "matrix-appservice",
  "version": "0.2.3",
  "description": "Matrix Application Service Framework",
  "main": "./index",
  "directories": {
    "test": "tests"
  },
  "scripts": {
    "gendoc": "jsdoc -r lib -R README.md -P package.json -d .jsdoc",
    "test": "echo \"Error: no test specified\" && exit 1",
    "lint": "eslint lib/"
  },
  "repository": {
    "url": "git+https://github.com/matrix-org/matrix-appservice-node.git"
  },
  "keywords": [
    "matrix-org"
  ],
  "author": {
    "name": "matrix.org"
  },
  "license": "Apache-2.0",
  "dependencies": {
    "body-parser": "~1.12.0",
    "express": "~4.12.0",
    "js-yaml": "^3.2.7",
    "morgan": "~1.5.1",
    "request": "~2.53.0"
  },
  "devDependencies": {
    "jsdoc": "^3.3.2",
    "eslint": "^1.3.1"
  },
  "readme": "This is a Matrix Application Service framework written in Node.js.\n\nThis can be used to quickly setup performant application services for almost \nanything you can think of in a web framework agnostic way.\n\nTo create an app service registration file:\n``` javascript\nvar AppServiceRegistration = require(\"matrix-appservice\").AppServiceRegistration;\n\n// creating registration files\nvar reg = new AppServiceRegistration();\nreg.setAppServiceUrl(\"http://localhost:8010\");\nreg.setHomeserverToken(AppServiceRegistration.generateToken());\nreg.setAppServiceToken(AppServiceRegistration.generateToken());\nreg.setSenderLocalpart(\"example-appservice\");\nreg.addRegexPattern(\"users\", \"@.*\", true);\nreg.outputAsYaml(\"registration.yaml\");\n```\n\nYou only need to generate a registration once, provided the registration info does not\nchange. Once you have generated a registration, you can run the app service like so:\n\n```javascript\nvar AppService = require(\"matrix-appservice\").AppService;\n// listening\nvar as = new AppService({\n  homeserverToken: \"abcd653bac492087d3c87\"\n});\nas.on(\"type:m.room.message\", function(event) {\n  // handle the incoming message\n});\nas.onUserQuery = function(userId, callback) {\n  // handle the incoming user query then respond\n  console.log(\"RECV %s\", userId);\n  callback();\n};\n// can also do this as a promise\nas.onAliasQuery = function(alias) {\n    // Needs a promise lib e.g.  var q = require(\"q\");\n    var defer = q.defer();\n    // do stuff\n    defer.resolve();\n    return defer.promise;\n};\nas.listen(8010);\n```\n\nAPI Reference\n=============\n\nA hosted API reference can be found on [GitHub Pages](http://matrix-org.github.io/matrix-appservice-node/index.html).\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/matrix-org/matrix-appservice-node/issues"
  },
  "homepage": "https://github.com/matrix-org/matrix-appservice-node#readme",
  "_id": "matrix-appservice@0.2.3",
  "_from": "matrix-appservice@>=0.2.3 <0.3.0"
}
