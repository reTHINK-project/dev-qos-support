{
  "name": "matrix-appservice-bridge",
  "version": "0.1.2",
  "description": "Bridging infrastructure for Matrix Application Services",
  "main": "index.js",
  "scripts": {
    "gendoc": "jsdoc -r lib -R README.md -P package.json -d .jsdoc",
    "lint": "eslint lib/ spec/",
    "test": "jasmine-node spec --verbose --forceexit --captureExceptions",
    "check": "npm run lint && npm test",
    "ci-test": "istanbul cover --report cobertura -i \"lib/**/*.js\" jasmine-node -- spec --verbose --junitreport --forceexit --captureExceptions || true",
    "ci-lint": "eslint lib/ spec/ --format checkstyle > ci-lint.xml || true",
    "ci": "npm run ci-lint; npm run ci-test"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/matrix-org/matrix-appservice-bridge.git"
  },
  "keywords": [
    "matrix-org"
  ],
  "author": {
    "name": "Matrix.org"
  },
  "license": "Apache-2.0",
  "bugs": {
    "url": "https://github.com/matrix-org/matrix-appservice-bridge/issues"
  },
  "homepage": "https://github.com/matrix-org/matrix-appservice-bridge#readme",
  "dependencies": {
    "bluebird": "^2.9.34",
    "extend": "^3.0.0",
    "jayschema": "^0.3.1",
    "js-yaml": "^3.4.0",
    "matrix-appservice": "^0.2.2-b",
    "matrix-js-sdk": "^0.2.1",
    "nedb": "^1.1.3",
    "nopt": "^3.0.3",
    "request": "^2.61.0"
  },
  "devDependencies": {
    "jsdoc": "^3.3.2",
    "istanbul": "^0.3.18",
    "jasmine-node": "^1.14.5",
    "eslint": "^1.2.0"
  },
  "readme": "# Matrix Application Service Bridging Infrastructure\n[![Build Status](http://matrix.org/jenkins/buildStatus/icon?job=AppServiceBridgeLib)](http://matrix.org/jenkins/job/AppServiceBridgeLib/)\n\nThis library sits on top of the\n[core application service library](https://github.com/matrix-org/matrix-appservice-node)\nand provides an API for setting up bridges quickly. Check out the\n[HOW-TO](HOWTO.md) for a step-by-step tutorial on setting up a new bridge.\n\n# Architecture\n\n```\n __________________________\n|                          |\n|   Your bridge e.g. IRC   |\n|__________________________|\n __|___________________|___\n|                          |\n| matrix-appservice-bridge |\n|__________________________|\n __|___________________|___\n|                          |\n|    matrix-appservice     |\n|__________________________|\n\n```\n\nThe bridge relies on `matrix-appservice` and `matrix-js-sdk` for their\nAS API and CS API implementations respectively. The bridge manages state for\nvirtual users and provides many useful helper functions bridges may desire.\n\n## Components\nThe bridge is formed around \"components\". You can pick and choose which\ncomponents you use, though some components depend upon other components.\nAll components operate on data models defined in the bridge. You can directly\nconstruct components: the bridge exposes the class constructor.\n\n### `BridgeStore`\nProvides basic document store (key-value) CRUD operations.\n\n### `UserBridgeStore`\nProvides storage for matrix and remote users. Provides CRUD operations and\nmapping between different types of users.\n\n### `RoomBridgeStore`\nProvides storage for matrix and remote rooms. Provides CRUD operations and\nmapping between different types of rooms.\n\n### `ClientFactory`\nProvides a method to obtain a JS SDK `MatrixClient` in the context of a\nparticular `user_id` and/or `Request`. This is used to send messages as other\nusers.\n\n### `Request` / `RequestFactory`\nAn abstraction provided to identify a single request through the bridge.\nCan be used for request-context logging (each request has a unique ID)\nand metrics (each request can succeed or fail and has timers for how long\nthey take to go through the bridge).\n\n### `Intent`\nProvides a way to perform Matrix actions by *intent* rather than by raw\nAPI calls. This can be thought of as an extension to the client-server JS SDK.\nFor example, `intent.invite(roomId, invitee)` would make sure that you are\nactually joined to the room `roomId` first (and will automatically join it if\nyou aren't) before trying to send the invite.\n\nPerforming actions by *intent* makes creating bridges a lot easier. For example,\nif your bridge has no concept of inviting or joining rooms, then you don't need\nto care about it either in the bridge. Simply calling\n`intent.sendMessage(roomId, text)` would make sure that you are joined to the\nroom first before sending the message.\n\n### `ConfigValidator`\nProvides a way to validate a YAML file when provided with a schema file.\nUseful for setting your bridge-specific configuration information.\n\n### `Cli`\nProcesses command line arguments and runs the `Bridge`.\n\n### `AppServiceBot`\nA wrapper around the JS SDK `MatrixClient` designed for use by the application\nservice *itself*. Contains helper methods to get all rooms the AS is in, how\nmany virtual / real users are in each, etc.\n\n### `Bridge`\nThe component which orchestrates other components: a \"glue\" component. Provides\na way to start the bridge. This is the component most examples use. Has\ndependencies on most of the components listed above.\n\n## Data Models\n * `MatrixRoom` - A representation of a matrix room.\n * `RemoteRoom` - A representation of a third-party room.\n * `MatrixUser` - A representation of a matrix user.\n * `RemoteUser` - A representation of a third-party user.\n\n# API\n\nA hosted reference can be found on\n[GitHub Pages](http://matrix-org.github.io/matrix-appservice-bridge/0.1.1).\nAlternatively, build the docs using `npm run gendoc`. Each component's class\nconstructor is exposed on `require(\"matrix-appservice-bridge\")` so check each\nclass for more information on how to use each component.\n\n",
  "readmeFilename": "README.md",
  "_id": "matrix-appservice-bridge@0.1.2",
  "dist": {
    "shasum": "ad517d839f9b3392cef9b24b24e55b201ad9b97f"
  },
  "_from": "matrix-appservice-bridge@^0.1.2",
  "_resolved": "https://registry.npmjs.org/matrix-appservice-bridge/-/matrix-appservice-bridge-0.1.2.tgz"
}
