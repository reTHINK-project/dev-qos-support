{
  "name": "localforage",
  "author": {
    "name": "Mozilla"
  },
  "license": "Apache-2.0",
  "description": "Offline storage, improved.",
  "keywords": [
    "indexeddb",
    "localstorage",
    "storage",
    "websql"
  ],
  "version": "1.3.0",
  "homepage": "https://github.com/mozilla/localForage",
  "repository": {
    "type": "git",
    "url": "git://github.com/mozilla/localForage.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "babel-core": "^5.8.22",
    "babel-loader": "^5.3.2",
    "babel-plugin-system-import-transformer": "^1.1.4",
    "babelify": "^6.1.2",
    "component": "^1.0.0-rc7",
    "cors": "^2.3.1",
    "grunt": "^0.4.2",
    "grunt-babel": "^5.0.0",
    "grunt-browserify": "^3.8.0",
    "grunt-contrib-concat": "^0.3.0",
    "grunt-contrib-connect": "^0.8.0",
    "grunt-contrib-jshint": "^0.9.2",
    "grunt-contrib-uglify": "^0.4.0",
    "grunt-contrib-watch": "^0.5.0",
    "grunt-es3-safe-recast": "^0.1.0",
    "grunt-jscs": "^1.5.0",
    "grunt-mocha": "^0.4.10",
    "grunt-saucelabs": "^5.1.2",
    "grunt-shell": "^0.6.4",
    "grunt-webpack": "^1.0.11",
    "load-grunt-tasks": "^0.4.0",
    "mocha": "^1.18.2",
    "phantomjs": "^1.9.7-12",
    "script-loader": "^0.6.1",
    "uglify-js": "^2.3.x",
    "webpack": "^1.11.0",
    "webpack-dev-server": "^1.10.1"
  },
  "main": "dist/localforage.js",
  "bugs": {
    "url": "http://github.com/mozilla/localForage/issues"
  },
  "dependencies": {
    "promise": "^5.0.0"
  },
  "readme": "# localForage [![Build Status](https://secure.travis-ci.org/mozilla/localForage.png?branch=master)](http://travis-ci.org/mozilla/localForage)\n\nlocalForage is a fast and simple storage library for JavaScript. localForage\nimproves the offline experience of your web app by using asynchronous storage\n(IndexedDB or WebSQL) with a simple, `localStorage`-like API.\n\nlocalForage uses localStorage in browsers with no IndexedDB or\nWebSQL support. See [the wiki for detailed compatibility info][supported browsers].\n\nTo use localForage, just drop a single JavaScript file into your page:\n\n```html\n<script src=\"localforage.js\"></script>\n<script>localforage.getItem('something', myCallback);</script>\n```\n\nDownload the [latest localForage from GitHub](https://github.com/mozilla/localForage/releases/latest), or install with\n[npm](https://www.npmjs.org/):\n\n```bash\nnpm install localforage\n```\n\nor [bower](http://bower.io):\n\n```bash\nbower install localforage\n```\n\nlocalForage is compatible with [browserify](http://browserify.org/).\n\n[supported browsers]: https://github.com/mozilla/localForage/wiki/Supported-Browsers-Platforms\n\n## Support\n\nLost? Need help? Try the\n[localForage API documentation](https://mozilla.github.io/localForage).\n\nIf you're stuck using the library, running the tests, or want to contribute\nto localForage, you can visit\n[irc.mozilla.org](https://wiki.mozilla.org/IRC) and head to the `#apps`\nchannel to ask questions about localForage.\n\nThe best person to ask about localForage is [**tofumatt**][tofumatt], who\nis usually online from 8am-8pm GMT (London Time).\n\n[tofumatt]: http://tofumatt.com/\n\n# How to use localForage\n\n## Callbacks\n\nBecause localForage uses async storage, it has an async API.\nIt's otherwise exactly the same as the\n[localStorage API](https://hacks.mozilla.org/2009/06/localstorage/).\n\n```javascript\n// In localStorage, we would do:\nvar obj = { value: \"hello world\" };\nlocalStorage.setItem('key', JSON.stringify(obj));\nalert(obj.value);\n\n// With localForage, we use callbacks:\nlocalforage.setItem('key', obj, function(err, result) { alert(result.value); });\n```\n\nSimilarly, please don't expect a return value from calls to\n`localforage.getItem()`. Instead, use a callback:\n\n```javascript\n// Synchronous; slower!\nvar value = JSON.parse(localStorage.getItem('key'));\nalert(value);\n\n// Async, fast, and non-blocking!\nlocalforage.getItem('key', function(err, value) { alert(value) });\n```\n\nCallbacks in localForage are Node-style (error argument first) since version\n`0.9.3`. This means if you're using callbacks, your code should look like this:\n\n```javascript\n// Use err as your first argument.\nlocalforage.getItem('key', function(err, value) {\n    if (err) {\n        console.error('Oh noes!');\n    } else {\n        alert(value);\n    }\n});\n```\n\nYou can store any type in localForage; you aren't limited to strings like in\nlocalStorage. Even if localStorage is your storage backend, localForage\nautomatically does `JSON.parse()` and `JSON.stringify()` when getting/setting\nvalues.\n\n## Promises\n\nPromises are pretty cool! If you'd rather use promises than callbacks,\nlocalForage supports that too:\n\n```javascript\nfunction doSomethingElse(value) {\n    console.log(value);\n}\n\n// With localForage, we allow promises:\nlocalforage.setItem('key', 'value').then(doSomethingElse);\n```\n\nWhen using Promises, `err` is **not** the first argument passed to a function.\nInstead, you handle an error with the rejection part of the Promise:\n\n```javascript\n// A full setItem() call with Promises.\nlocalforage.setItem('key', 'value').then(function(value) {\n    alert(value + ' was set!');\n}, function(error) {\n    console.error(error);\n});\n```\n\nlocalForage relies on native [ES6 Promises](http://www.promisejs.org/), but\n[ships with an awesome polyfill](https://github.com/jakearchibald/ES6-Promises)\nfor browsers that don't support ES6 Promises yet.\n\n## Storing Blobs, TypedArrays, and other JS objects\n\nlocalForage supports storing all native JS objects that can be serialized to\nJSON, as well as ArrayBuffers, Blobs, and TypedArrays. Check the\n[API docs][api] for a full list of types supported by localForage.\n\nAll types are supported in every storage backend, though storage limits in\nlocalStorage make storing many large Blobs impossible.\n\n[api]: https://mozilla.github.io/localForage/#setitem\n\n## Configuration\n\nYou can set database information with the `config()` method.\nAvailable options are `driver`, `name`, `storeName`, `version`, `size`, and\n`description`.\n\nExample:\n```javascript\nlocalforage.config({\n    driver      : localforage.WEBSQL, // Force WebSQL; same as using setDriver()\n    name        : 'myApp',\n    version     : 1.0,\n    size        : 4980736, // Size of database, in bytes. WebSQL-only for now.\n    storeName   : 'keyvaluepairs', // Should be alphanumeric, with underscores.\n    description : 'some description'\n});\n```\n\n**Note:** you must call `config()` _before_ you interact with your data. This\nmeans calling `config()` before using `getItem()`, `setItem()`, `removeItem()`,\n`clear()`, `key()`, `keys()` or `length()`.\n\n## Multiple instances\n\nYou can create multiple instances of localForage that point to different stores\nusing `createInstance`. All the configuration options used by\n`[config](#configuration)` are supported.\n\n``` javascript\nvar store = localforage.createInstance({\n  name: \"nameHere\"\n});\n\nvar otherStore = localforage.createInstance({\n  name: \"otherName\"\n});\n\n// Setting the key on one of these doesn't affect the other.\nstore.setItem(\"key\", \"value\");\notherStore.setItem(\"key\", \"value2\");\n```\n\n## RequireJS\n\nYou can use localForage with [RequireJS](http://requirejs.org/):\n\n```javascript\ndefine(['localforage'], function(localforage) {\n    // As a callback:\n    localforage.setItem('mykey', 'myvalue', console.log);\n\n    // With a Promise:\n    localforage.setItem('mykey', 'myvalue').then(console.log);\n});\n```\n\n## Browserify and Webpack\n\nlocalForage should work with both Browserify and Webpack as of the current\nmaster branch. Older releases have spotty support but this will soon be fixed.\n\n**For browserify:** ensure that you have the\n[required plugins and transformers](https://github.com/mozilla/localForage/blob/master/package.json#L57)\ninstalled.\n\n**For Webpack:** currently, you need to require localForage as `require('script!localforage')` using [webpack script-loader](https://github.com/webpack/script-loader).\n\n## Framework Support\n\nIf you use a framework listed, there's a localForage storage driver for the\nmodels in your framework so you can store data offline with localForage. We\nhave drivers for the following frameworks:\n\n* [AngularJS](https://github.com/ocombe/angular-localForage)\n* [Backbone](https://github.com/mozilla/localForage-backbone)\n* [Ember](https://github.com/genkgo/ember-localforage-adapter)\n\nIf you have a driver you'd like listed, please\n[open an issue](https://github.com/mozilla/localForage/issues/new) to have it\nadded to this list.\n\n## Custom Drivers\n\nYou can create your own driver if you want; see the\n[`defineDriver`](https://mozilla.github.io/localForage/#definedriver) API docs.\n\nThere is a [list of custom drivers on the wiki][custom drivers].\n\n[custom drivers]: https://github.com/mozilla/localForage/wiki/Custom-Drivers\n\n# Working on localForage\n\nYou'll need [node/npm](http://nodejs.org/),\n[bower](http://bower.io/#installing-bower), and\n[Grunt](http://gruntjs.com/getting-started#installing-the-cli).\n\nTo work on localForage, you should start by\n[forking it](https://github.com/mozilla/localForage/fork) and installing its\ndependencies. Replace `USERNAME` with your GitHub username and run the\nfollowing:\n\n```bash\n# Install bower and grunt globally if you don't have them:\nnpm install -g bower grunt-cli\n\n# Replace USERNAME with your GitHub username:\ngit clone git@github.com:USERNAME/localForage.git\ncd localForage\nnpm install\nbower install\n```\n\nOmitting the bower dependencies will cause the tests to fail!\n\n## Running Tests\n\nYou need PhantomJS installed to run local tests. Run `npm test` (or,\ndirectly: `grunt test`). Your code must also pass the\n[linter](http://www.jshint.com/).\n\nlocalForage is designed to run in the browser, so the tests explicitly require\na browser environment. Local tests are run on a headless WebKit (using\n[PhantomJS](http://phantomjs.org)).\n\nWhen you submit a pull request, tests will be run against all browsers that\nlocalForage supports on Travis CI using [Sauce Labs](https://saucelabs.com/).\n\n## Building the API Documentation\n\nWe currently use a Ruby tool to build our\n[API documentation](https://mozilla.github.io/localForage). You can install the Ruby dependencies with [Bundler](http://bundler.io):\n\n```bash\n# From inside the localForage directory\nbundle install\n```\n\nThen use `grunt` to serve the site:\n\n```bash\ngrunt site\n```\n\nNavigate to [localhost:4567](http://localhost:4567/) in your browser to see the\ndocs.\n\nThere is an [open issue to move to a node tool for the docs](https://github.com/mozilla/localForage/issues/192).\n\n# License\n\nThis program is free software; it is distributed under an\n[Apache License](https://github.com/mozilla/localForage/blob/master/LICENSE).\n\n---\n\nCopyright (c) 2013-2015 [Mozilla](https://mozilla.org)\n([Contributors](https://github.com/mozilla/localForage/graphs/contributors)).\n",
  "readmeFilename": "README.md",
  "_id": "localforage@1.3.0",
  "dist": {
    "shasum": "b94c2c286d8bdf5883cf886d75a16675a5e39a5c"
  },
  "_from": "localforage@^1.3.0",
  "_resolved": "https://registry.npmjs.org/localforage/-/localforage-1.3.0.tgz"
}
